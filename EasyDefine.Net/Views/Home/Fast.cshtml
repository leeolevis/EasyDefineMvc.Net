<!DOCTYPE HTML>
<html>
<head>
    <title></title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="stylesheet" href="~/assets/css/main.css" />
</head>
<body class="subpage">

    <!-- Header -->
    <header id="header">
        <div class="inner">
            <a class="logo"><strong>EasyDefine Mvc</strong> for .Net Core</a>
            <nav id="nav">
                <a href="~/">首页</a>
                <a href="/Home/Document">文档</a>
                <a href="https://github.com/shayuxiang/EasyDefineMvc.Net">Git</a>
                <a href="/Home/Document#wfw">微服务</a>
                <a href="/Home/About">关于</a>
            </nav>
            <a href="#navPanel" class="navPanelToggle"><span class="fa fa-bars"></span></a>
        </div>
    </header>
    <section id="main" class="wrapper">
        <div class="inner">
            <header class="align-center">
                <h2>快速接入指南</h2>
                <p> Fast Access Guide </p>
            </header>
            <hr class="major" />
            <h2 id="content">什么是EasyDefine？</h2>
            <p>
                首先声明，作者本人是一个非常懒的IT从业者,也是一个996工作制的坚决抵制者。写这个框架，从构思、到设计、编码调试、测试、发布，
                一个最重要的核心，就是希望这个框架，或者说工具能使得我们在日后的编码工作中，能够有效地减少工作量和工作强度。所以，我不想高
                谈阔论扯一些看起来高大上的理论。而坐在屏幕前阅读的您，无论您是身经百战的大牛还是白纸一张小强，也都不必思前顾后地考虑一些问题，
                比如：代码长啥样呀？哪里NB呀？这里好蠢呀！用了啥技术啊等等云云。
            </p>
            <p>
                言归正传。EasyDefine MVC 是一个基于 .net stardard 动态编译技术的框架。我们的思路是，通过AOP的手段，让SOA服务层以及DAL数据层自动地实现并编译您的接口，
                并且将它们注入到您的ServicesCollection中。
            </p>
            <p>
                这样，在我们开发和维护项目时，对于一些常用的，长得差不多的功能，实际上只针对接口进行维护，而无需关心他的细节，如下所示：
            </p>
            <h5>数据层</h5>
            <pre>
            <code>
                    [DapperLink(PointEnum = SourcePointEnum.Master, NameSpace = "PPM.Online.ProductData")]
                    public interface ITestOrderDAL
                    {
                    [DapperQuery(QueryCommand = @@"SELECT cc.Thehour,count(cc.theday) as Num,SUM(cc.ReceiptAmount) as Amount FROM
                    ( SELECT DATE_FORMAT(t.GmtPayment,'%Y-%m-%d') as theday,DATE_FORMAT(t.GmtPayment,'%H') as Thehour,t.ReceiptAmount FROM T_TradeOrder t ) cc
                    WHERE cc.theday = @@datestring GROUP BY cc.thehour")]
                     Task&lt;dynamic&gt;  GetOrderCountByDay(string datestring);
                    }
                </code>
        </pre>
            <h5>服务层</h5>
            <pre>
            <code>
                [ScriptClass(NameSpace = "PPM.Online.OrderAPI")] //定义类属命名空间
                [Inject(VariableName = "order", Ref = typeof(ITestOrderDAL))] //注入DAL
                public interface IAdminOrderSOA
                {
                    [ScriptMethod(Describe = "根据日期查出当天的成交订单统计")]
                    Task&lt;dynamic&gt; GetOrderCountByDay(string datestring);
                }
            </code>
        </pre>
            <p>
                如上述代码。您可能会说，和我平时写的，去掉标注，也没啥区别啊！
            </p>
            <p>
                没错！在EasyDefine的编码中，像增删改查以及其它一些常用功能，是不需要写实现类的。系统会根据您的标注，经过对方法的分析(包括参数、返回值、异步同步等),
                自动地生成.cs文件，并且将他编译，然后悄悄地，给您注入到您的MVC内核中，您只需要像日常一样地注入引用即可：
            </p>
            <h5>Controller中的使用</h5>
            <pre>
            <code>
                    private readonly IAdminOrderSOA _soa;

                    public TestController(IAdminOrderSOA soa)
                    {
                        this._soa = soa;
                    }

                    [HttpGet]
                    [ApiDescription("这是第一个测试接口")]
                    public async Task&lt;JsonResult&gt; Index() {
                        try
                        {
                            ViewBag.Test = await _soa.GetOrderCountByDay(DateTime.Now);
                            return View();
                        }
                        catch (MySqlException ex)
                        {
                            throw ex;
                        }
                        catch (Exception ex)
                        {
                           throw ex;
                        }
                    }
                </code>
        </pre>
            <p>这样，我们就写完了一个查询!是不是很轻松？下面，我用一张逻辑图来说明程序执行的过程:</p>
            <img src="~/images/EasyDefine.jpg" />
            <br />
            <p>有关基础配置详情 <a>请点此处</a></p>

            <hr class="major" />
            <h2 id="content">动态编译技术详解</h2>
            <p>
                内容引用自:https://blog.csdn.net/clb929/article/details/51385399
                <br />
                代码的动态编译并执行是.NET平台提供给我们的很强大的一个工具，用以灵活扩展（当然是面对内部开发人员）复杂而无法估算的逻辑，并通过一些额外的代码来扩展我们已有 的应用程序。这在很大程度上给我们提供了另外一种扩展的方式（当然这并不能算是严格意义上的扩展，但至少为我们提供了一种思路）。
                动态代码执行可以应用在诸如模板生成，外加逻辑扩展等一些场合。一个简单的例子，为了网站那的响应速度，HTML静态页面往往是我们最好的选择，但基于数据驱动的网站往往又很难用静态页面实现，那么将动态页面生成html的工作或许就是一个很好的应用场合。另外，对于一些模板的套用，我们同样可以用它来做。另外这本身也是插件编写的方式。
            </p>
            <p>
                .Net为我们提供了很强大的支持来实现这一切我们可以去做的基础，主要应用的两个命名空间是：System.CodeDom.Compiler和Microsoft.CSharp或Microsoft.VisualBasic。另外还需要用到反射来动态执行你的代码。动态编译并执行代码的原理其实在于将提供的源代码交予CSharpCodeProvider来执行编译（其实和CSC没什么两样），如果没有任何编译错误，生成的IL代码会被编译成DLL存放于于内存并加载在某个应用程序域（默认为当前）内并通过反射的方式来调用其某个方法或者触发某个事件等。之所以说它是插件编写的一种方式也正是因为与此，我们可以通过预先定义好的借口来组织和扩展我们的程序并将其交还给主程序去触发。
            </p>
        </div>
    </section>
</body>
